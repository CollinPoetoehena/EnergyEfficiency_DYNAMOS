syntax = "proto3";

package proto;

option go_package = "github.com/Jorrit05/DYNAMOS/pkg/proto";
import "google/protobuf/empty.proto";
import "google/protobuf/any.proto";
import "google/protobuf/struct.proto";

// The sidecar definition.
service SideCar {
  rpc InitRabbitMq(ServiceRequest) returns (google.protobuf.Empty) {}
  rpc Consume(ConsumeRequest) returns (stream RabbitMQMessage) {}
  rpc SendRequestApproval(RequestApproval) returns  (google.protobuf.Empty) {}
  rpc SendValidationResponse(ValidationResponse) returns  (google.protobuf.Empty) {}
  rpc SendCompositionRequest(CompositionRequest) returns  (google.protobuf.Empty) {}
  rpc SendSqlDataRequest(SqlDataRequest) returns  (google.protobuf.Empty) {}
  rpc SendSqlDataRequestResponse(SqlDataRequestResponse) returns  (google.protobuf.Empty) {}
}

message ServiceRequest {
  string service_name = 1;
  string routing_key = 2;
  bool queue_auto_delete = 3;
}

message ConsumeRequest {
  string queue_name = 1;
  bool auto_ack = 2;
}

message RabbitMQMessage {
  string type = 1;
  google.protobuf.Any body = 2;
}

message Auth {
  string access_token = 1;
  string refresh_token = 2;
}

message DataProvider {
  repeated string archetypes = 1;
  repeated string compute_providers = 2;
}

message ValidationResponse {
  string type = 1;
  string request_type = 2;
  map<string, DataProvider> valid_dataproviders = 3;
  repeated string invalid_dataproviders = 4;
  Auth auth = 5;
  User user = 6;
  bool request_approved = 7;
}

message User {
  string id = 1;
  string user_name = 2;
}

message RequestApproval {
  string type = 1;
  User user = 2;
  repeated string data_providers = 3;
  bool sync_services = 4;
}

message AcceptedDataRequest  {
  string type = 1;
  User user = 2;
  Auth auth = 3;
  map<string, string> authorized_providers = 4;
  string result_channel = 5;
}

message CompositionRequest {
    string archetype_id = 1;
    string request_type = 2;
    string role = 3;
    User user = 4;
    repeated string data_providers = 5;
    string destination_queue = 6;
    string job_name =7;
}

message SqlDataRequest {
  string type = 1;
  repeated string data_providers = 2;
  string query = 3;
  bool graph = 4;
  string algorithm = 5;
  map<string, string> algorithm_columns = 6;
  User user = 7;
  string destination_queue = 8;
  string return_address = 9;
  string correlation_id = 10;
}

message SqlDataRequestResponse {
  string correlation_id = 1;
  google.protobuf.Struct data = 2;
  string return_address = 3;
  string job_name = 4;
  map<string, string> metadata = 5;
  google.protobuf.Any user_request = 6;
  string destination_queue = 7;
}