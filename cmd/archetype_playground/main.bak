// INPUT
policyResult := PolicyResult{
    ArchetypeId: "computeToData", // or "dataThroughTtp"
    User: User{
        ID:       "GUID",
        UserName: "jstutterheim@uva.nl",
    },
    DataProviders:         []string{"VU", "UVA"},
    ComputeProvider:       "", // "surf" with archeType dataThroughTtp
    RequestType:           "sqlDataRequest",
    RequiredMicroservices: []string{"anonymize_service"},
}

// Returns requiredServices & optionalServices for sqlDataRequest
requestType := fetchRequestType("/requestType/" + policyResult.RequestType)

// Returns a slice of all labeled services contained in
// requiredServices & optionalServices for sqlDataRequest
allServices := fetchServices(&requestType)

// Filter out the services relevant for `sqlDataRequest'
services := filterServices(&requestType, &allServices)

// Merge requestType requiredServices with PolicyResult.RequiredMicroservices
servicesToInclude := append(requestType.RequiredServices, policyResult.RequiredMicroservices...)

// Generate a service microservice chain for the request
chain := generateChain(servicesToInclude, services)

// archetype := fetchFromETCD("/archetypes/computeToData")
archetype := fetchFromETCD("/archetypes/dataThroughTtp")
splitServices := splitServicesByArchetype(chain, archetype.ComputeProvider)

// OUTPUT computeToData:
// Generated dataproviders chain:
// 0: {query_service DataProvider [algorithm_service anonymize_service]}
// 1: {anonymize_service DataProvider [algorithm_service]}
// 2: {algorithm_service ComputeProvider [graph_service]}
// Generated computeproviders chain:
//

// OUTPUT dataThroughTtp
// Generated dataproviders chain:
// 0: {query_service DataProvider [algorithm_service anonymize_service]}
// 1: {anonymize_service DataProvider [algorithm_service]}

// Generated computeproviders chain:
// 0: {algorithm_service ComputeProvider [graph_service]}
}