package main

import (
	"fmt"
	"reflect"
)

type PolicyResult struct {
	DataProviders   []string
	ComputeProvider string
	Requestor       string
	ResultRecipient string
}

type Archetype struct {
	DataProvider     string
	ComputeProvider  string
	ResultRecipient  string
	SoftwareProvider string
}

type ArchetypeRole struct {
	DataProviderRole    []string
	ComputeProviderRole string
	ResultRecipientRole string
}

func handlePolicyResult(policyResult PolicyResult, archetypeConfig Archetype) ArchetypeRole {
	valueOfPolicyResult := reflect.ValueOf(policyResult)

	fmt.Println(valueOfPolicyResult)
	// {[DataProvider1 DataProvider2] surf User1 }

	var archeTypeRoles ArchetypeRole

	valueOfArchetypeRole := reflect.ValueOf(&archeTypeRoles).Elem()
	fmt.Println(valueOfArchetypeRole) // {[] [] }

	valueOfArchetypeConfig := reflect.ValueOf(archetypeConfig)
	typeOfArchetypeConfig := valueOfArchetypeConfig.Type()
	fmt.Println(valueOfArchetypeConfig)           //{DataProviders DataProviders Requestor }
	fmt.Println(typeOfArchetypeConfig)            // main.Archetype
	fmt.Println(typeOfArchetypeConfig.NumField()) // 4

	for i := 0; i < typeOfArchetypeConfig.NumField(); i++ {
		archetypeConfigFieldName := typeOfArchetypeConfig.Field(i).Name
		policyResultFieldName := valueOfArchetypeConfig.Field(i).String()
		fmt.Println(policyResultFieldName) // DataProviders , // DataProviders, // Requestor

		// if policyResult has the field named by policyResultFieldName
		if policyResultValue := valueOfPolicyResult.FieldByName(policyResultFieldName); policyResultValue.IsValid() {
			archetypeRoleField := valueOfArchetypeRole.FieldByName(archetypeConfigFieldName + "Role")
			// check the field type to make proper assignment
			fmt.Println(archetypeRoleField.Type())
			if archetypeRoleField.Type().String() == "string" {
				fmt.Println(policyResultValue.String())
				archetypeRoleField.SetString(policyResultValue.String())
			} else if archetypeRoleField.Type().String() == "[]string" {
				archetypeRoleField.Set(reflect.ValueOf(policyResultValue.Interface().([]string)))
			}
		}
	}
	return archeTypeRoles
}

func main() {
	policyResult := PolicyResult{
		DataProviders:   []string{"DataProvider1", "DataProvider2"},
		Requestor:       "User1",
		ComputeProvider: "surf",
	}

	// Compute to data
	archetypeConfig := Archetype{
		DataProvider:    "DataProviders",
		ComputeProvider: "other",
		ResultRecipient: "Requestor",
	}

	archetypeRole := handlePolicyResult(policyResult, archetypeConfig)

	for i, v := range archetypeRole.DataProviderRole {
		fmt.Println("DataProviderRole_" + fmt.Sprint(i) + ": " + v)
	}

	fmt.Println("ResultRecipientRole: " + archetypeRole.ResultRecipientRole)

	fmt.Println("ComputationProviderRole: " + archetypeRole.ComputeProviderRole)

	// fmt.Println(archetypeRole) // {[DataProvider1 DataProvider2] [DataProvider1 DataProvider2] User1}

	// type ArchetypeRole struct {
	// 	DataProviderRole    []string -> [DataProvider1 DataProvider2]
	// 	ComputeProviderRole []string -> [DataProvider1 DataProvider2]
	// 	ResultRecipientRole string -> User1
	// }

	// sqlDataRequest = {"start" : "query_service", "end" : "algorithm_service" }

}

// func handlePolicyResult1(policyResult PolicyResult) ArchetypeRole {
// 	// Fetch the archetype configuration from ETCD based on the name given in the policy result
// 	archetypeConfig := fetchFromETCD("/archetypes/" + policyResult.Archetype)

// policyResult := PolicyResult{
// 	DataProviders:     []string{"DataProvider1", "DataProvider2"},
// 	Requestor:         "User1",
// 	TrustedThirdParty: "Kees",
// }

// 	// // Compute to data
// 	// archetypeConfig := Archetype{
// 	// 	DataProvider:        "DataProvider",
// 	// 	ComputationProvider: "DataProvider",
// 	// 	ResultRecipient:     "Requestor",
// 	// }

// 	// Create an empty ArchetypeRole object to store the resolved roles
// 	var archeTypeRoles []ArchetypeRole

// 	if archetypeConfig.ComputationProvider == "DataProvider" {
// 		// All MS with label "DataProvider" go to all dataproviders
// 		// All MS with label "ComputationProvider" go to all dataproviders
// 	} else {
// 		// All MS with label "DataProvider" go to all dataproviders
// 		// All MS with label "ComputationProvider" go to all PolicyResult.computeProvider
// 	}

// 	// for i, dataProvider := range policyResult.DataProviders {
// 	// 	archeTypeRoles[i].DataProviderRole = dataProvider

// 	// 	if archetypeConfig.ComputationProvider == "DataProvider" {
// 	// 		archeTypeRoles[i].ComputationProviderRole = dataProvider
// 	// 	} else if archetypeConfig.ComputationProvider == "TrustedThirdParty" {
// 	// 		archeTypeRoles[i].ComputationProviderRole = policyResult.TrustedThirdParty
// 	// 	} else if archetypeConfig.Requestor == "Requestor" {
// 	// 		archeTypeRoles[i].ComputationProviderRole = policyResult.Requestor
// 	// 	}

// 	// }

// 	// For each role in the archetype configuration, check the value and assign the corresponding role in the policy result
// 	archeTypeRoles.DataProviderRole = policyResult.DataProviders

// 	if archetypeConfig.ComputationProvider == "DataProvider" {
// 		archeTypeRoles.ComputationProviderRole = policyResult.DataProviders
// 	} else if archetypeConfig.ComputationProvider == "TrustedThirdParty" {
// 		archeTypeRoles.ComputationProviderRole = policyResult.TrustedThirdParty
// 	}

// 	if archetypeConfig.ResultRecipient == "requestor" {
// 		archeTypeRoles.ResultRecipient = policyResult.Requestor
// 	} else if archetypeConfig.ResultRecipient == "DataProvider" {
// 		archeTypeRoles.ResultRecipient = policyResult.DataProviders[0]
// 	} else if archetypeConfig.ResultRecipient == "AlgorithmProvider" {
// 		archeTypeRoles.ResultRecipient = policyResult.AlgorithmProvider
// 	}

// 	if archetypeConfig.AlgorithmProvider == "requestor" {
// 		archeTypeRoles.AlgorithmProviderRole = policyResult.Requestor
// 	}
// 	// Return the resolved roles
// 	return archeTypeRoles
// }
